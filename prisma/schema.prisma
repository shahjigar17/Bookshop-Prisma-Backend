// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Book {
  id            Int           @id @default(autoincrement())
  title         String
  sellingPrice  Decimal       @db.Decimal(10, 2)
  originalPrice Decimal       @db.Decimal(10, 2)
  isbn          String
  publisher     String
  author        String
  language      String
  user          User          @relation(fields: [sellerId], references: [id])
  sellerId      Int
  status        BookBuyStatus @default(AVAILABLE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  bookMedia   BookMedia[]
  Transaction Transaction[]
  Cart        Cart[]

  @@unique([isbn])
  @@index([sellerId])
}

model BookMedia {
  id        Int       @id @default(autoincrement())
  media     String
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([bookId])
}

model Cart {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  book      Book      @relation(fields: [bookId], references: [id])
  bookId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([bookId])
}

model Profile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  bio       String    @db.Text
  phone     String
  address   String    @db.Text
  city      String
  country   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
}

model Transaction {
  id                Int               @id @default(autoincrement())
  user              User              @relation(fields: [buyerId], references: [id])
  buyerId           Int
  book              Book              @relation(fields: [bookId], references: [id])
  bookId            Int
  transactionID     String            @db.Text /// Stripe Transaction ID
  transactionStatus TransactionStatus
  remarks           String?           @db.Text /// Stripe Transaction ID
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?

  @@index([buyerId])
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  name             String
  password         String
  role             Role      @default(USER)
  stripeCustomerId String?
  profile          Profile?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  UserCard    UserCard[]
  book        Book[]
  Transaction Transaction[]
  Cart        Cart[]
}

model UserCard {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  cardId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum Role {
  USER
  ADMIN
}

enum TransactionStatus {
  SUCCEEDED
  FAILURE
}

enum BookBuyStatus {
  AVAILABLE
  SOLD
}
